---
# ansible-playbook full/02a_variable_basics_full.yml --extra-vars="planet='Mars' diameter=6792 cmd_line_var='I am a command line variable.'"


# Set and show the value of a scalar variable
# Usage: ansible-playbook use_variables.yml
- name: Use variables
  hosts: managed_node1
  gather_facts: false
  tasks:
    - name: Set and show a string variable
      vars:
        # Use quotation marks to explicitly declare strings
        planet: "Mercury"
      ansible.builtin.debug:
        msg: "{{ planet }}"

# Use default values if variables are undefined or empty
# Usage: ansible-playbook use_default_values.yml
- name: Use default values
  hosts: managed_node1
  gather_facts: false
  vars:
    defined_var: "I am defined."
    empty_var: ""
  tasks:
    - name: Show a defined variable
      ansible.builtin.debug:
        msg: "{{ defined_var }}"

    - name: Use a default value if a variable is undefined
      block:
        - name: Try to show an undefined variable
          ansible.builtin.debug:
            msg: "{{ undefined_var }}"

      rescue:
        - name: Use a default value
          ansible.builtin.debug:
            msg: "{{ undefined_var |
              default('I am undefined.') }}"

    - name: Show an empty variable
      ansible.builtin.debug:
        msg: "{{ empty_var | default('I am empty.') }}"

    - name: Use a default value if a variable is empty
      ansible.builtin.debug:
        msg: "{{ empty_var | default('I am empty.',
          true) }}"

# Set and show different types of scalar variables
# Usage: ansible-playbook use_multiple_vars.yml
- name: Use multiple variables
  hosts: managed_node1
  gather_facts: false
  vars:
    planet: "Mercury"
    diameter: 4879
    diam_hex: 0x130F
    diam_oct: 011417 # noqa yaml[octal-values]
    hours_per_day: 4222.6
    # Use 'true/false' instead of 'yes/no' or 'on/off'
    rings: false
    # Leave blank or use 'null' for NoneType
    moons: null
  tasks:
    - name: Show different types of scalar variables
      ansible.builtin.debug:
        msg:
          - "The name of the planet is {{ planet }}."
          - "It is {{ diameter }} km in diameter."
          - "0x130F (hex) = {{ diam_hex }} (dec)."
          - "011417 (oct) = {{ diam_oct }} (dec)."
          - "Rings: {{ rings }}"
          - "Moons: {{ moons | default('None', true) }}"

    - name: Use different variable types in a string
      ansible.builtin.debug:
        msg: "A day on {{ planet }} is {{ hours_per_day }}
          Earth hours."

# Set and show lists of variables
# Usage: ansible-playbook use_lists.yml
- name: Use lists
  hosts: managed_node1
  gather_facts: false
  tasks:
    - name: Set and show a list
      vars:
        moons:
          - "Phobos"
          - "Deimos"
      ansible.builtin.debug:
        msg:
          - "{{ moons }}"
          - "{{ moons[0] }} and {{ moons.1 }} are moons."

    - name: Set and show a mixed list
      vars:
        mars:
          - "Mars"
          - 6792
          - 24.7
      ansible.builtin.debug:
        msg:
          - "{{ mars }}"
          - "{{ mars[0] }} is {{ mars[1] }} km in diameter."
          - "One sol is {{ mars[2] }} Earth hours."

# Set and show dictionaries of variables
# Usage: ansible-playbook use_dicts.yml
- name: Use dictionaries
  hosts: managed_node1
  gather_facts: false
  tasks:
    - name: Set and show a dictionary
      vars:
        mars:
          planet: "Mars"
          diameter: 6792
          hours_per_day: 24.7
      ansible.builtin.debug:
        msg:
          - "{{ mars }}"
          - "{{ mars['planet'] }} is {{ mars.diameter }} km
            in diameter."
          - "One sol is {{ mars['hours_per_day'] }} Earth
            hours."

# Set and show a list of dictionaries
# Usage: ansible-playbook use_list_dicts.yml
- name: Use list of dictionaries
  hosts: managed_node1
  gather_facts: false
  tasks:
    - name: Set and show a dictionary
      vars:
        planets:
          - planet: "Venus"
            diameter: 12104
          - planet: "Earth"
            diameter: 12756
          - planet: "Mars"
            diameter: 6792
      ansible.builtin.debug:
        msg:
          - "{{ planets }}"
          - "{{ planets[0]['planet'] }} is
            {{ planets[0]['diameter'] }} km in diameter."
          - "{{ planets[1].planet }} is
            {{ planets[1].diameter }} km in diameter."
          - "{{ planets[2]['planet'] }} is
            {{ planets[2].diameter }} km in diameter."

# Show variables and their types
# Usage: ansible-playbook get_var_type.yml
- name: Get variable types
  hosts: managed_node1
  gather_facts: false
  tasks:
    - name: Show the type of a variable
      vars:
        planet: "Mars"
      ansible.builtin.debug:
        msg: "{{ planet | type_debug }}"

    - name: Show the types of other variables
      vars:
        planet: "Mars"
        diameter: 6792
        hours_per_day: 24.7
        rings: false
        moons:
          - "Phobos"
          - "Deimos"
        other:
          au: 1.52
          order_no: 3
      ansible.builtin.debug:
        msg:
          - "'{{ planet }}' ({{ planet | type_debug }})"
          - "{{ diameter }} ({{ diameter | type_debug }})"
          - "{{ hours_per_day }} ({{ hours_per_day |
            type_debug }})"
          - "{{ rings }} ({{ rings | type_debug }})"
          - "{{ moons }} ({{ moons | type_debug }})"
          - "'{{ moons[0] }}' ({{ moons[0] | type_debug }})"
          - "{{ other }} ({{ other | type_debug }})"
          - "{{ other['au'] }} ({{ other['au'] |
            type_debug }})"

# Get and show the return values of a task
# Usage: ansible-playbook use_return_values.yml
- name: Use return values
  hosts: managed_node1
  gather_facts: false
  tasks:
    - name: Say Hello
      ansible.builtin.debug:
        msg: "Hello, World!"
      register: result

    - name: Show the return values of the previous task
      ansible.builtin.debug:
        msg: "{{ result }}"

    - name: Show the return value object type
      ansible.builtin.debug:
        msg: "{{ result | type_debug }}"

    - name: Show a single return value
      ansible.builtin.debug:
        msg: "The message was {{ result['msg'] }}"

# Get and show special variables and facts
# Usage: ansible-playbook use_special_vars.yml
- name: Use special variables
  hosts: managed_node1
  gather_facts: false
  tasks:
    - name: Show default magic variables
      ansible.builtin.debug:
        msg: "{{ hostvars }}"

    - name: Show a magic variable
      ansible.builtin.debug:
        msg: "{{ inventory_hostname }}"

    - name: Scan the target node and gather facts
      ansible.builtin.setup:

    - name: Show gathered magic variables and facts
      ansible.builtin.debug:
        msg: "{{ hostvars }}"

    - name: Show facts for the target node only
      ansible.builtin.debug:
        msg: "{{ ansible_facts }}"

    - name: Show a fact
      ansible.builtin.debug:
        msg: "{{ ansible_facts['os_family'] }}"

- name: Gather facts by default
  hosts: managed_node1
  gather_facts: true
  tasks:
    # Results should be the same as the last three tasks
    # of the previous play
    - name: Show gathered magic variables and facts
      ansible.builtin.debug:
        msg: "{{ hostvars }}"

    - name: Show facts for the target node only
      ansible.builtin.debug:
        msg: "{{ ansible_facts }}"

    - name: Show a fact about the target node
      ansible.builtin.debug:
        msg: "{{ ansible_facts['os_family'] }}"

# Get and show command line variables
# Usage:
# ansible-playbook use_cmd_line_vars.yml \
#   --extra-vars="planet='Mars' diameter=6792"
- name: Use command line variables
  hosts: managed_node1
  gather_facts: false
  tasks:
    - name: Show command line variables values and types
      ansible.builtin.debug:
        msg:
          - "{{ planet }} is {{ diameter }} km in diameter."
          - "'planet' is a {{ planet | type_debug }}."
          - "'diameter' is a {{ diameter | type_debug }}."

# Demonstrate variable scope in a playbook
# Usage:
# ansible-playbook demo_var_scope.yml -e \
#   "cmd_line_var='I am a command line variable.'"
- name: Demonstrate variable scope
  hosts: managed_node1
  gather_facts: false
  vars:
    play_var: "I am a play variable."
  tasks:
    - name: Show the command line variable
      ansible.builtin.debug:
        msg: "{{ cmd_line_var }}"

    - name: Show CLI and play variables
      ansible.builtin.debug:
        msg:
          - "{{ cmd_line_var }}"
          - "{{ play_var }}"

    - name: Show a block variable
      vars:
        block_var: "I am a block variable."
      block:
        - name: Show CLI, play, and block variables
          ansible.builtin.debug:
            msg:
              - "{{ cmd_line_var }}"
              - "{{ play_var }}"
              - "{{ block_var }}"

        - name: Show CLI, play, block, and task variables
          vars:
            task_var: "I am a task variable."
          ansible.builtin.debug:
            msg:
              - "{{ cmd_line_var }}"
              - "{{ play_var }}"
              - "{{ block_var }}"
              - "{{ task_var }}"

        - name: Try to use a task variable outside its task
          ansible.builtin.debug:
            msg: "{{ task_var | default('Out of scope.') }}"

    - name: Try to use a block variable outside its block
      ansible.builtin.debug:
        msg: "{{ block_var | default('Out of scope.') }}"

- name: Run a second play to demonstrate playbook scope
  hosts: managed_node1
  gather_facts: false
  tasks:
    - name: Show the command line variable
      ansible.builtin.debug:
        msg: "{{ cmd_line_var }}"

    - name: Try to use a play variable outside its play
      ansible.builtin.debug:
        msg: "{{ play_var | default('Out of scope.') }}"

# Set a fact usable by the plays and tasks in a playbook
# Usage: ansible-playbook set_facts.yml
- name: Set facts
  hosts: managed_node1
  gather_facts: false
  tasks:
    - name: Set a fact
      ansible.builtin.set_fact:
        new_fact: "This is a new fact"

    - name: Show the fact
      ansible.builtin.debug:
        msg: "{{ new_fact }}"

- name: Show a fact set in a previous play on the same node
  hosts: managed_node1
  gather_facts: false
  tasks:
    - name: Show the fact
      ansible.builtin.debug:
        msg: "{{ new_fact }}"

- name: "Try to show a fact set in a previous play on a
    different node"
  hosts: managed_node2
  gather_facts: false
  tasks:
    - name: Attempt to show a fact
      block:
        - name: Show the fact
          ansible.builtin.debug:
            msg: "{{ new_fact }}"

      rescue:
        - name: Show an error message
          ansible.builtin.debug:
            msg: "{{ new_fact | default('That fact is not
              defined on this node') }}"

# Demonstrate variable precedence in a play
# Note: You cannot override command line vars
# Usage: ansible-playbook demo_var_precedence.yml
- name: Demonstrate variable precedence
  hosts: managed_node1
  gather_facts: false
  vars:
    play_var: "I am a play level variable."
  tasks:
    - name: Show play_var at the play level
      ansible.builtin.debug:
        msg: "{{ play_var }}"

    - name: Override play_var
      vars:
        play_var: "Block level variables override play level
          variables with the same name within the block."
      block:
        - name: Override play_var at the block level
          ansible.builtin.debug:
            msg: "{{ play_var }}"

        - name: Override play_var at the task level
          vars:
            play_var: "Task level variables override block
              level variables with the same name within the
              task."
          ansible.builtin.debug:
            msg: "{{ play_var }}"

    - name: Show play_var at the play level again
      ansible.builtin.debug:
        msg: "{{ play_var }}"

    - name: Edit play_var using set_fact
      ansible.builtin.set_fact:
        play_var: "The set_fact module overrides play,
          block, and task assignments."

    - name: Show the new value of play_var
      ansible.builtin.debug:
        msg: "{{ play_var }}"
...
# code: language=ansible
# vi: set noai nu ts=2 sw=2 sts=2 sta et:
