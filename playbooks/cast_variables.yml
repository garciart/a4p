---
# This playbook casts variables to other types
# Usage: ansible-playbook cast_variables.yml
- name: Cast a variable to another type
  hosts: managed_node_1
  gather_facts: false
  tasks:
    - name: Recast variables at the point of use (always works)
      vars:
        str_value: "1"
        int_value: 0
        float_value: 1.0
        bool_value: false
      ansible.builtin.debug:
        msg:
          - >-
            You can cast a string ('{{ str_value }}') as
            an integer ({{ str_value | int }}),
            a float ({{ str_value | float }}),
            or a boolean ({{ str_value | bool }}).
          - >-
            You can cast an integer ({{ int_value }}) as
            a string ('{{ int_value | string }}'),
            a float ({{ int_value | float }}),
            or a boolean ({{ int_value | bool }}).
          - >-
            You can cast a float ({{ float_value }}) as
            a string ('{{ float_value | string }}'),
            an integer ({{ float_value | int }}),
            or a boolean ({{ float_value | bool }}).
          - >-
            You can cast a boolean ({{ bool_value }}) as
            a string ('{{ bool_value | string }}'),
            an integer ({{ bool_value | int }}),
            or a float ({{ bool_value | float }}).

    - name: Convert variables using casting (may not work)
      vars:
        int_value: 1
        bool_from_int: "{{ int_value | bool }}"
        float_from_int: "{{ int_value | float }}"
        str_from_int: "{{ int_value | string }}"

        str_value: "0"
        bool_from_str: "{{ str_value | bool }}"
        float_from_str: "{{ str_value | float }}"
        int_from_str: "{{ str_value | int }}"
      ansible.builtin.debug:
        msg:
          # Jinja2 templating returns a string, unless converting to boolean
          - >-
            {{ int_value }} ({{ int_value | type_debug }})
            to bool becomes {{ bool_from_int }}
            ({{ bool_from_int | type_debug }}).
          - >-
            {{ int_value }} ({{ int_value | type_debug }})
            to float becomes {{ float_from_int }}
            ({{ float_from_int | type_debug }}), not float.
          - >-
            {{ int_value }} ({{ int_value | type_debug }})
            to str becomes {{ str_from_int }}
            ({{ str_from_int | type_debug }}), not string.
          - >-
            {{ str_value }} ({{ str_value | type_debug }})
            to bool becomes {{ bool_from_str }}
            ({{ bool_from_str | type_debug }}).
          - >-
            {{ str_value }} ({{ str_value | type_debug }})
            to float becomes {{ float_from_str }}
            ({{ float_from_str | type_debug }}), not float.
          - >-
            {{ str_value }} ({{ str_value | type_debug }})
            to int becomes {{ int_from_str }}
            ({{ int_from_str | type_debug }}), not int.

    - name: Use set_fact to recast variables (may not work)
      block:
        - name: Set a fact
          ansible.builtin.set_fact:
            str_value: "1"

        - name: Display the fact and its type
          ansible.builtin.debug:
            var: str_value, str_value | type_debug

        - name: Recast fact to int
          ansible.builtin.set_fact:
            str_value: "{{ str_value | int }}"

        - name: Display the recast fact and its type
          ansible.builtin.debug:
            var: str_value, str_value | type_debug

        - name: Create a new fact
          ansible.builtin.set_fact:
            int_value: "{{ str_value | int }}"

        - name: Display the new fact and its type
          ansible.builtin.debug:
            var: int_value, int_value | type_debug
...
# code: language=ansible
# vi: set noai nu ts=2 sw=2 sts=2 sta et:
