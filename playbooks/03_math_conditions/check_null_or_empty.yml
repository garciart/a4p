---
# This playbook checks if a variable is undefined, null, or empty
# Usage: ansible-playbook check_null_or_empty.yml
- name: Check if a variable is undefined, null, or empty
  hosts: managed_node1
  gather_facts: false
  vars:
    null_var: null
    empty_var: "   "
    not_empty_var: "a  "
  tasks:
    - name: Check if a variable is defined
      ansible.builtin.assert:
        that: "{{ undef_var is defined }}"
        success_msg: "undef_var is defined."
        fail_msg: "undef_var is not defined."
      # See https://ansible.readthedocs.io/projects/lint/rules/ignore-errors/
      ignore_errors: true # noqa ignore-errors

    - name: Check if a variable is null
      ansible.builtin.assert:
        that: "{{ null_var != None }}"
        success_msg: "null_var is not null."
        fail_msg: "null_var is null."
      ignore_errors: true # noqa ignore-errors

    - name: Check if a variable is empty (this method always works)
      ansible.builtin.assert:
        # Trim before checking and do not compare to an empty string
        # See https://ansible.readthedocs.io/projects/lint/rules/empty-string-compare/
        that: "{{ empty_var | trim | length != 0 }}"
        success_msg: "empty_var is not empty."
        fail_msg: "empty_var is empty."
      ignore_errors: true # noqa ignore-errors

    - name: Do not run a task if a variable is undefined, null, or empty
      ansible.builtin.debug:
        msg: "Hello, World!"
      # Always check if the variable is defined first
      when: undef_var is defined and undef_var != None and undef_var | trim | length != 0

    - name: Display a default value if a variable is undefined
      ansible.builtin.debug:
        msg: "This variable is undefined; using a default value of {{ undef_var | default(8) }}."
...
# code: language=ansible
# vi: set noai nu ts=2 sw=2 sts=2 sta et:
